# BASE 
homekit_style:
  aspect_ratio: 1/1
  show_label: true
  show_state: true
  name: '[[[ return entity.attributes.friendly_name ]]]'  
  size: 30%
  color_type: card
  hold_action:
    action: more-info          
  color: rgb(242, 242, 247)
  state: &button_state
    - styles: &on_state
        # - color: rgb(100, 210, 255)
        # - color: "#fbc02d"
        # card:
        #   - '--paper-card-background-color': var(--homekit-white)
        card: [background-color: 'rgba(255, 255, 255, 0.8)']
        name: [color: 'rgba(0, 0, 0, 0.6)']
        state: [color: 'rgba(0, 0, 0, 0.6)']
        icon: [color: "#fbc02d"]
      value: 'on'
      id: _state_value_on

    - styles: *on_state
      value: 'armed_away'

    - styles: *on_state
      value: 'armed_home'

    - styles:
        <<: *on_state
        state: [color: 'red']
      value: 'arming'

    - styles: &default_off
        card: [background-color: null]
        icon: [color: 'rgb(142, 142, 147)']
      value: "disarmed"

    - styles: &off_state
        icon:
          # - filter: grayscale(100%)
          - color: rgb(142, 142, 147)
      value: 'off'

  styles:
    card:
      - border-radius: 20px
      # Borrar estos dos si se quiere un look menos plano
      - box-shadow: none
      - background-color: "rgba(10, 10, 10, 0.7)"
    label:
      - color: black
      - font-size: 11px
      - font-family: Helvetica
      - padding: 0px 10px
      - justify-self: start
      - color: var(--primary-text-color)
    state:
      - font-size: 11px
      - font-family: Helvetica
      - padding: 0px 10px
      - justify-self: start
      - text-transform: capitalize
      - font-weight: bold
      - padding-left: 20px
      - padding-bottom: 10px
      - color: var(--primary-text-color)
      - max-width: 75%      
    grid:
      - grid-template-areas: '"i" "n" "s" "l"'
      - grid-template-columns: 1fr
      - grid-template-rows: 1fr # min-content min-content min-content
    img_cell:
      - justify-content: start
      - align-items: start
      - padding-left: 20px
    icon:
      - height: auto
      - padding-top: 10px
    name:
      - justify-self: start
      - padding-left: 20px
      - font-weight: bold
      - font-family: Helvetica
      - font-size: 13px
      - padding-bottom: 3px   
      - color: var(--primary-text-color)
      - max-width: 75%   

# light:
#   aspect_ratio: 1/1
#   show_state: true
#   show_icon: false
#   state: # &button_state
#     - value: 'on'
#       styles:
#         card: [background-color: 'rgba(255, 255, 255, 0.8)']
#         name: [color: 'rgba(0, 0, 0, 0.6)']
#         state: [color: 'rgba(0, 0, 0, 0.6)']
#   custom_fields:
#     info: >
#       [[[ if (entity.state === 'on' && entity.attributes.brightness) {
#       const brightness = Math.round(entity.attributes.brightness / 2.54);
#       const radius = 20.5; const circumference = radius * 2 * Math.PI; 
#       return `<svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" style="
#       transform: rotate(-90deg); transform-origin: 50% 50%; stroke-dasharray: ${circumference}; stroke-dashoffset: ${circumference - brightness / 100 * circumference};" />
#       <text x="50%" y="54%" fill="#8d8e90" font-size="11" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="">%</tspan></text></svg>`; } ]]]
#   styles:
#     name: &button_styles_name
#       [top: 57.7%, left: 11%, position: absolute, line-height: 2vw]
#     state: &button_styles_state
#       [top: 74%, left: 11%, position: absolute, line-height: 2vw]
#     custom_fields:
#       info: &circle_pos
#         [top: 8.5%, left: 56.2%, width: 3.5vw, position: absolute, letter-spacing: 0.03vw]
#     card: &button_styles_card
#       [text-rendering: optimizeLegibility, color: 'rgba(255, 255, 255, 0.3)', 
#       background-color: 'rgba(115, 115, 115, 0.2)', border-radius: 0.8vw, box-shadow: none, transition: none]
#   tap_action:
#   #   ui_sound: &ui_sound |
#   #     [[[ if (entity.state === 'off' && states['switch.fullykiosk_screensaver'].state === 'off') {
#   #     hass.callService('media_player', 'play_media', {entity_id: 'media_player.tablet', media_content_id: '/local/sound/on.m4a', media_content_type: 'music'}); }
#   #     else if (entity.state === 'on' && states['switch.fullykiosk_screensaver'].state === 'off') {
#   #     hass.callService('media_player', 'play_media', {entity_id: 'media_player.tablet', media_content_id: '/local/sound/off.m4a', media_content_type: 'music'}); } ]]]
#     action: toggle
#     haptic: light
#   hold_action:
#     action: call-service
#     service: browser_mod.popup
#     service_data:
#       title: Light
#       deviceID: this
#       style:
#         --ha-card-border-radius: 1em
#         --more-info-header-color: rgba(255,255,255,0.6)
#         background: none
#         box-shadow: none
#       card:
#         type: vertical-stack
#         cards:
#           - type: entities
#             title: '[[[ return entity.attributes.friendly_name ]]]'
#             style: |
#               ha-card {
#                 animation: pop-in 0.8s cubic-bezier(0.16, 1, 0.3, 1) both; transform-origin: center;
#                 box-shadow: none; border-radius: 1em; padding: 0.3em 1.25em 0.4em 0.5em; 
#                 background: linear-gradient(180deg, rgba(48,52,52,1) 0%, rgba(48,52,52,1) 4.8em, rgba(34,38,39,1) 4.8em, rgba(34,38,39,1) 100%); }
#               .card-header {
#                 margin: -0.4em 0 1.4em 0.4em; font-family: sf text; letter-spacing: 0.005em; font-size: 1.5em;}
#               @keyframes pop-in {
#                 0% { transform: scale(0.6); opacity: 0; } 20% { opacity: 0; } 100% { transform: scale(1); opacity: 0.9; }}
#             show_header_toggle: false
#             entities:
#               - type: custom:light-popup-card
#                 entity: '[[[ return entity.entity_id ]]]'
#                 icon: none
#                 fullscreen: false
#                 brightnessWidth: 130px
#                 brightnessHeight: 360px
#                 borderRadius: 1.7em
#                 sliderColor: '#c7c7c7'
#                 sliderTrackColor: rgba(25, 25, 25, 0.9)
#                 actionSize: 4.5em
#                 actionsInARow: 2
#                 style: |
#                   #popup { 
#                     margin: -2.4em 0 1.4em 0; }
#                   #popup > div.range-holder > input[type=range] {
#                     cursor: grab; }
#                   #brightnessValue {
#                     color: rgba(255, 255, 255, 0.8); margin: -1em 0 0 0; font-size: 2em; font-weight: 400; 
#                     position: absolute; z-index: 100; font-family: SF Display; letter-spacing: 0.02em; pointer-events: none; 
#                     mix-blend-mode: difference; text-align:center; width: 3.4em; height: 3.4em; }
#                   #popup > div.range-holder > input[type=range]::-webkit-slider-thumb {
#                     border: 0; eight: 0; width: 0; cursor: grabbing; }
#                   #popup > div.action-holder > div > div {
#                     margin: 0.8em 0.5em -0.8em 0.5em; }
#                   #popup > div.action-holder > div:nth-child(2) > div:nth-child(2) > span {
#                     background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,0) 80%), 
#                     conic-gradient(rgb(120,39,230), rgb(230,34,231), rgb(228,5,136), rgb(228,25,25), rgb(229,105,30), rgb(232,226,46), 
#                     rgb(125,230,41), rgb(52,232,40), rgb(51,231,92), rgb(52,232,224),rgb(32,125,229), rgb(18,39,229), rgb(120,39,230));
#                     border-width: 2px; border-color: #e6e6e6; --size: 4.4em !important; }
#                 actions:
#                   - service: light.turn_on
#                     service_data:
#                       entity_id: '[[[ return entity.entity_id ]]]'
#                       color_temp: 153
#                     color: "#d8d9e1"
#                   - service: light.turn_on
#                     service_data:
#                       entity_id: '[[[ return entity.entity_id ]]]'
#                       color_temp: 326
#                     color: "#d5b08d"
#                   - service: light.turn_on
#                     service_data:
#                       entity_id: '[[[ return entity.entity_id ]]]'
#                       color_temp: 500
#                     color: "#ce944b"
#                   - service: browser_mod.popup
#                     service_data:
#                       title: Light
#                       deviceID: this
#                       style:
#                         --ha-card-border-radius: 1em
#                         --more-info-header-color: rgba(255,255,255,0.6)
#                         background: none
#                         box-shadow: none
#                       card:
#                         type: entities
#                         title: Custom
#                         # style: *popup_style
#                         show_header_toggle: false
#                         entities:
#                           - entity: '[[[ return entity.entity_id ]]]'
#                             secondary_info: last-changed
#                           - type: custom:light-entity-card
#                             entity: '[[[ return entity.entity_id ]]]'
#                             style:
#                               .: |
#                                 ha-card {
#                                   background: none; box-shadow: none; margin: -0.5em -1em -0.5em -0.7em; }
#                                 ha-card > div.light-entity-card-sliders.ha-slider-full-width { 
#                                   margin-bottom: 0.75em; }
#                                 ha-card > div.light-entity-card-sliders.ha-slider-full-width > div > ha-icon {
#                                   margin: auto; width: 34px; height: 34px; cursor: default; 
#                                   padding-right: 0.49em; color: var(--paper-item-icon-color);}
#                                 ha-card > div.light-entity-card-sliders.ha-slider-full-width > div > div {
#                                   margin: auto; padding: 0 1.4em 0 1em; max-width: 1em; cursor: default;}
#                               'ha-card > div.light-entity-card-sliders.ha-slider-full-width > div > ha-slider':
#                                 $: |
#                                   #sliderContainer { 
#                                     --calculated-paper-slider-height: var(--paper-slider-height, 5px); }
#                             brightness: false
#                             color_temp: true
#                             full_width_sliders: true
#                             header: false
#                             show_slider_percent: true
#                             smooth_color_wheel: true

# switch:
#   aspect_ratio: 1/1
#   show_state: true
#   show_icon: false
#   state: *button_state
#   styles:
#     name: *button_styles_name
#     state: *button_styles_state
#     card: *button_styles_card
#     custom_fields:
#       loading:
#         [filter: "[[[ return entity.state === 'off' ? 'invert(1)' : 'none'; ]]]", 
#           top: 3%, left: 60%, width: 3.7vw, position: absolute, opacity: 0.6]
#   tap_action:
#     # ui_sound: *ui_sound
#     haptic: light

# icon_action:
#   color: '#9da0a2'
#   styles:
#     card:
#       [background: '#FFFFFF10', border-radius: 0.6em, box-shadow: none, 
#       transition: none, width: 4em, height: 3.7em]

# name_action:
#   styles:
#     name:
#       [display: flex, align-items: center, justify-content: center, margin-top: 0.5px]
#     card:
#       [background: '#FFFFFF10', color: '#9da0a2', border-radius: 0.6em, box-shadow: none, 
#       transition: none, width: 100%, padding: 1em 1.4em 1em 1.2em, font-size: 1.06em, 
#       font-weight: 500, letter-spacing: 0.015em]
#   style: '#name > ha-icon {width: 1.4em; margin-right: 0.3em; }'

# media:
#   aspect_ratio: 1/1
#   show_state: true
#   show_icon: false
#   state_display: >
#     [[[ if (entity.attributes.media_title === 'Nothing playing' || entity.attributes.media_title === 'No title' && entity.state === 'paused' ) { return 'Nothing playing'; }
#     if (entity.attributes.media_title === 'No title' && entity.state === 'playing') { return 'No title'; }
#     else { return entity.attributes.media_title; } ]]]
#   custom_fields:
#     media_image: >
#       <svg viewBox="0 0 50 50" />
#     blur: >
#       [[[ if (entity.attributes.entity_picture != null) {
#       return '<svg viewBox="0 0 50 50" />'; } ]]]
#     overlay: >
#       [[[ if (entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby' && entity.state != 'unavailable') {
#       return '<svg viewBox="0 0 50 50" />'; } ]]]
#     play_pause: >
#       [[[ const style = `<style>.scale-up { animation: scale-up 0.3s; cubic-bezier(.05,.5,.3,1) 1; transform-origin: center center; }
#       @keyframes scale-up { 0% { opacity: 0; transform: scale(0); } 100% { opacity: 1; transform: scale(1); } }</style>`;
#       if (entity.state === 'playing') { return `<svg viewBox="0 0 166 166">${style}<path class="scale-up" d="M0 0h59.9v166H0zm106.1 0H166v166h-59.9z"/></svg>`; }
#       if (entity.state === 'paused') { return `<svg viewBox="0 0 166 166">${style}<path class="scale-up" d="M0 0l166 83L0 166z"/></svg>`; } ]]]
#   tap_action: 
#     # sound: >
#     #   [[[ if (states['switch.fullykiosk_screensaver'].state === 'off') {
#     #   if (entity.state != 'off' || entity.state != 'idle' || entity.state != 'standby')
#     #   hass.callService('media_player', 'play_media', {entity_id: 'media_player.tablet', media_content_id: '/local/sound/popup.m4a', media_content_type: 'music'}); } ]]]
#     action: >
#       [[[ if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby') {
#       return 'none'; } else { return 'call-service'; } ]]]
#     service: media_player.media_play_pause
#     service_data:
#       entity_id: '[[[ return entity.entity_id ]]]'
#     haptic: light
#   styles:
#     custom_fields:
#       # media_image:
#       #   [background-image:
#       #   "[[[ return entity.attributes.entity_picture == null ? 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)' 
#       #   : 'linear-gradient(0deg, rgba(13,17,19,0.9) 0%, rgba(13,17,19,0) 50%), url(' + entity.attributes.entity_picture + ')'; ]]]", 
#       #   background-size: cover, top: 0%, left: 0%, width: 100%, position: absolute]
#       blur:
#         [background-image:
#         "[[[ return entity.attributes.entity_picture == null ? 'none' : 'url(' + entity.attributes.entity_picture + ')'; ]]]", 
#         background-size: cover, top: 0%, left: 0%, width: 100%, filter: blur(4px), clip-path: inset(16vw 0 0 0), position: absolute]
#       overlay:
#         [background:
#         "[[[ return entity.attributes.entity_picture == null ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.4)'; ]]]", 
#         background-size: cover, z-index: 0, top: 16vw, left: 0%, width: 100%, opacity: 1, position: absolute]
#       play_pause:
#         [filter: 
#         "[[[ return entity.attributes.entity_picture == null ? 'none' : 'drop-shadow(0 0 1.3vw rgba(0,0,0,0.7))'; ]]]", 
#         fill: '#dedede', top: 0, right: 0, bottom: 0, left: 0, margin: auto, width: 21%, height: 21%, position: absolute]
#       icon:
#         [fill:
#         "[[[ if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' || entity.state === 'unavailable') return '#9da0a2'; 
#         else return 'rgba(255, 255, 255, 0.8)'; ]]]", 
#         top: 5.35%, left: 5.35%, width: 2.95vw, position: absolute]
#     name:
#       [top: 79.8%, left: 5.3%, position: absolute, line-height: 2vw, z-index: 10]
#     state:
#       [top: 87.5%, left: 5.3%, position: absolute, line-height: 2vw, z-index: 10, 
#       white-space: nowrap, overflow: hidden, text-overflow: ellipsis, max-width: 90%]
#     card: 
#       [<<: *button_styles_card, background-color: none, 
#       color: &media_font_color "[[[ if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' || entity.state === 'unavailable') { return 'rgba(255, 255, 255, 0.3)'; }
#       if ((entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby') && (entity.attributes.entity_picture == null)) {
#       return 'rgba(0, 0, 0, 0.6)'; } else { return '#efefef'; } ]]]", 
#       text-shadow: &media_text_shadow "[[[ if (entity.attributes.entity_picture == null) return 'none'; 
#       else return '1px 1px 5px rgba(18, 22, 23, 0.9)' ; ]]]"]

# media_small:
#   aspect_ratio: 1/1
#   show_state: true
#   show_icon: false
#   tap_action: *media_tap_action
#   styles:
#     custom_fields:
#       icon:
#         [opacity: "[[[ return entity.attributes.entity_picture == null ? 1 : 0; ]]]", 
#         top: 11.5%, left: 11.5%, width: 2.9vw, position: absolute, fill: '#9da0a2']
#     name: *button_styles_name
#     state: *button_styles_state
#     card:
#       [<<: *button_styles_card, color: *media_font_color, text-shadow: *media_text_shadow, 
#       background-color: none, background-size: cover,
#       background-image: 
#       "[[[ if (entity.state === 'off' || entity.state === 'idle' || entity.state === 'standby' || entity.state === 'unavailable') {
#       return 'linear-gradient(0deg, rgba(115, 115, 115, 0.2) 0%, rgba(115, 115, 115, 0.2) 100%)'; }
#       if ((entity.state != 'off' && entity.state != 'idle' && entity.state != 'standby') && (entity.attributes.entity_picture == null)) {
#       return 'linear-gradient(0deg, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.8) 100%)'; }
#       else { return 'linear-gradient(0deg, rgba(0,0,0,.8) 0%, rgba(0,0,0,0) 100%), url(' + entity.attributes.entity_picture + ')'; } ]]]"]
